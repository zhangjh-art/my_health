<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cnasoft.health.userservice.mapper.SysUserMapper">
    <sql id="column_list">
        t.id, AES_DECRYPT(UNHEX(t.username), #{key}) username, AES_DECRYPT(UNHEX(t.short_id), #{key}) short_id,
        AES_DECRYPT(UNHEX(t.password), #{key}) password,convert(AES_DECRYPT(UNHEX(t.name), #{key}) using utf8) name,
        t.nickname, t.head_img_url,AES_DECRYPT(UNHEX(t.mobile), #{key}) mobile,
        t.sex, t.email, t.open_id, t.area_code, t.school_id, t.role_code, t.enabled, t.approve_status, t.first_login,
        t.create_by, t.create_time, t.update_by, t.update_time, t.is_deleted, t.name_change
    </sql>

    <!--根据条件查询存在的数量-->
    <select id="getCount" resultType="java.lang.Integer">
        select count(0) from sys_user
        <where>
            <if test="param != null and param.username != null and param.username != ''">
                and AES_DECRYPT(UNHEX(username), #{key}) = #{param.username}
            </if>
        </where>
    </select>

    <select id="selectOneById" resultType="com.cnasoft.health.userservice.model.SysUser">
        select
        <include refid="column_list"/>
        from sys_user t
        where t.id = #{id} and t.is_deleted = 0 limit 1
    </select>

    <resultMap id="userResultMap" type="com.cnasoft.health.userservice.model.SysUser">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="short_id" property="shortId"/>
        <result column="password" property="password"/>
        <result column="name" property="name"/>
        <result column="nickname" property="nickname"/>
        <result column="head_img_url" property="headImgUrl"/>
        <result column="mobile" property="mobile"/>
        <result column="sex" property="sex"/>
        <result column="email" property="email"/>
        <result column="open_id" property="openId"/>
        <result column="area_code" property="areaCode"/>
        <result column="school_id" property="schoolId"/>
        <result column="role_code" property="roleCode"/>
        <result column="enabled" property="enabled"/>
        <result column="approve_status" property="approveStatus"/>
        <result column="first_login" property="firstLogin"/>
        <result column="create_by" property="createBy"/>
        <result column="create_time" property="createTime"/>
        <result column="update_by" property="updateBy"/>
        <result column="update_time" property="updateTime"/>
        <result column="is_deleted" property="isDeleted"/>
    </resultMap>
    <select id="findList" resultMap="userResultMap">
        select
        <include refid="column_list"/>
        from sys_user t
        <where>
            t.is_deleted = 0
            <if test="u.number != null">
                and AES_DECRYPT(UNHEX(t.mobile), #{key}) like concat(#{u.number}, '%')
            </if>
            <if test="u.text != null and u.text != ''">
                and AES_DECRYPT(UNHEX(t.name), #{key}) like concat(#{u.text}, '%')
            </if>
            <if test="u.id != null and u.id != ''">
                and t.id like concat('%', #{u.id}, '%')
            </if>
            <if test="u.username != null and u.username != ''">
                and AES_DECRYPT(UNHEX(t.username), #{key}) like concat('%', #{u.username}, '%')
            </if>
            <if test="u.nickname != null and u.nickname != ''">
                and t.nickname like concat('%', #{u.nickname}, '%')
            </if>
            <if test="u.name != null and u.name != ''">
                and AES_DECRYPT(UNHEX(t.name), #{key}) like concat(#{u.name}, '%')
            </if>
            <if test="u.mobile != null and u.mobile != ''">
                and AES_DECRYPT(UNHEX(t.mobile), #{key}) like concat(#{u.mobile}, '%')
            </if>
            <if test="u.enabled != null">
                and t.enabled = #{u.enabled}
            </if>
            <if test="u.approveStatus != null">
                and t.approve_status = #{u.approveStatus}
            </if>
            <if test="u.areaCode != null">
                and t.area_code = #{u.areaCode}
            </if>
            <if test="u.areaType != null">
                <choose>
                    <when test="u.areaType == 0">
                        and t.area_code > 0 and t.area_code % 10000 = 0
                    </when>
                    <when test="u.areaType == 1">
                        and t.area_code % 100 = 0 and t.area_code % 10000 <![CDATA[ <> ]]> 0
                    </when>
                    <otherwise>
                        and t.area_code % 100 <![CDATA[ <> ]]> 0 and t.area_code % 10000 <![CDATA[ <> ]]> 0
                    </otherwise>
                </choose>
            </if>
            <if test="u.roleCodes != null">
                and t.role_code in
                <foreach collection="u.roleCodes" item="roleCode" index="index" open="(" close=")" separator=",">
                    #{roleCode}
                </foreach>
            </if>
        </where>
        order by t.id desc
    </select>

    <select id="findAreaManagerList" resultType="com.cnasoft.health.userservice.model.SysUser">
        select t.id, convert(AES_DECRYPT(UNHEX(t.name), #{key}) using utf8) as name,
        AES_DECRYPT(UNHEX(t.mobile), #{key}) mobile,t.sex, t.email, t.enabled, t.area_code,
        IFNULL(a.approve_status,t.approve_status) as approve_status, a.approve_remark as remark
        from sys_user t
        left join (select business_id,approve_status,approve_remark from approve where id in
        (select substring_index(group_concat(id order by id desc), ",", 1) as id from approve
        where approve_type = ${@com.cnasoft.health.common.enums.ApproveType@AREA_MANAGER.code} group by business_id
        )
        ) a on a.business_id = t.id
        <where>
            t.is_deleted = 0 and t.role_code = 'region_admin'
            <if test="u.areaCode != null and u.areaCode > 0">
                and t.area_code = #{u.areaCode}
            </if>
            <if test="u.number != null">
                and AES_DECRYPT(UNHEX(t.mobile), #{key}) like concat(#{u.number}, '%')
            </if>
            <if test="u.text != null and u.text != ''">
                and AES_DECRYPT(UNHEX(t.name), #{key}) like concat(#{u.text}, '%')
            </if>
            <if test="u.enabled != null">
                and t.enabled = #{u.enabled}
            </if>
            <if test="u.approveStatus != null">
                and a.approve_status = #{u.approveStatus}
            </if>
            <if test="u.areaType != null">
                <choose>
                    <when test="u.areaType == 0">
                        and t.area_code > 0 and t.area_code % 10000 = 0
                    </when>
                    <when test="u.areaType == 1">
                        and t.area_code % 100 = 0 and t.area_code % 10000 <![CDATA[ <> ]]> 0
                    </when>
                    <otherwise>
                        and t.area_code % 100 <![CDATA[ <> ]]> 0 and t.area_code % 10000 <![CDATA[ <> ]]> 0
                    </otherwise>
                </choose>
            </if>
        </where>
        order by t.id desc
    </select>

    <select id="findSchoolManagerList" resultType="com.cnasoft.health.userservice.model.SysUser">
        select t.id, convert(AES_DECRYPT(UNHEX(t.name), #{key}) using utf8) as name,
        AES_DECRYPT(UNHEX(t.mobile), #{key}) mobile,t.sex, t.email, t.enabled,
        IFNULL(a.approve_status,t.approve_status) as approve_status, a.approve_remark as remark,
        t.school_id,s.name as school_name,s.area_code
        from sys_user t
        left join (select business_id,approve_status,approve_remark from approve where id in
        (select substring_index(group_concat(id order by id desc), ",", 1) as id from approve
        where approve_type = ${@com.cnasoft.health.common.enums.ApproveType@SCHOOL_MANAGER.code} group by business_id
        )
        ) a on a.business_id = t.id
        inner join school s on s.id = t.school_id
        <where>
            t.is_deleted = 0 and t.role_code = 'school_admin'
            <if test="u.schoolId != null and u.schoolId > 0">
                and s.id = #{u.schoolId}
            </if>
            <if test="u.areaCode != null and u.areaCode > 0">
                and s.area_code = #{u.areaCode}
            </if>
            <if test="u.number != null">
                and AES_DECRYPT(UNHEX(t.mobile), #{key}) like concat(#{u.number}, '%')
            </if>
            <if test="u.text != null and u.text != ''">
                and AES_DECRYPT(UNHEX(t.name), #{key}) like concat(#{u.text}, '%')
            </if>
            <if test="u.enabled != null">
                and t.enabled = #{u.enabled}
            </if>
            <if test="u.approveStatus != null">
                and a.approve_status = #{u.approveStatus}
            </if>
        </where>
        order by t.id desc
    </select>

    <select id="findTestManagerList" resultType="com.cnasoft.health.userservice.model.SysUser">
        select t.id, convert(AES_DECRYPT(UNHEX(t.name), #{key}) using utf8) as name,
        AES_DECRYPT(UNHEX(t.mobile), #{key}) mobile,t.sex, t.email, t.enabled,
        IFNULL(a.approve_status,t.approve_status) as approve_status, a.approve_remark as remark
        from sys_user t
        left join (select business_id,approve_status,approve_remark from approve where id in
        (select substring_index(group_concat(id order by id desc), ",", 1) as id from approve
        where approve_type = ${@com.cnasoft.health.common.enums.ApproveType@TEST_MANAGER.code} group by business_id
        )
        ) a on a.business_id = t.id
        <if test="u.areaCode != null">
            inner join test_manager tm on tm.user_id = t.id
            inner join school s on s.id = tm.school_id
        </if>
        <if test="u.areaCode == null and u.schoolId != null">
            inner join test_manager tm on tm.user_id = t.id
        </if>
        <where>
            t.is_deleted = 0 and t.role_code = 'test_admin'
            <if test="u.areaCode != null">
                and s.area_code = #{u.areaCode}
            </if>
            <if test="u.schoolId != null">
                and tm.school_id = #{u.schoolId}
            </if>
            <if test="u.number != null">
                and AES_DECRYPT(UNHEX(t.mobile), #{key}) like concat(#{u.number}, '%')
            </if>
            <if test="u.text != null and u.text != ''">
                and AES_DECRYPT(UNHEX(t.name), #{key}) like concat(#{u.text}, '%')
            </if>
            <if test="u.enabled != null">
                and t.enabled = #{u.enabled}
            </if>
            <if test="u.approveStatus != null">
                and a.approve_status = #{u.approveStatus}
            </if>
        </where>
        order by t.id desc
    </select>

    <select id="findAreaCode" resultType="com.cnasoft.health.userservice.model.School">
        select s.id, s.name, s.area_code
        from school_manager sm
                 inner join school s on s.id = sm.school_id
        where sm.is_deleted = 0
          and s.is_deleted = 0
          and sm.user_id = #{userId}
    </select>

    <select id="findOne" resultType="com.cnasoft.health.userservice.model.SysUser">
        select id from sys_user t
        <where>
            t.is_deleted = 0
            <if test="u.username != null and u.username != ''">
                and AES_DECRYPT(UNHEX(t.username), #{key}) like concat('%', #{u.username}, '%')
            </if>
            <if test="u.name != null and u.name != ''">
                and AES_DECRYPT(UNHEX(t.name), #{key}) like concat(#{u.name}, '%')
            </if>
            <if test="u.mobile != null and u.mobile != ''">
                and AES_DECRYPT(UNHEX(t.mobile), #{key}) like concat(#{u.mobile}, '%')
            </if>
            <if test="u.enabled != null">
                and t.enabled = #{u.enabled}
            </if>
            <if test="u.areaCode != null">
                and t.area_code = #{u.areaCode}
            </if>
            <if test="u.approveStatus != null">
                and t.approve_status = #{u.approveStatus}
            </if>
        </where>
        order by t.id desc limit 1
    </select>

    <select id="findListByIds" resultType="com.cnasoft.health.userservice.model.SysUser">
        select
        <include refid="column_list"/>
        from sys_user t
        <where>
            is_deleted = 0 and approve_status = 1
            <if test="ids != null and ids.size() > 0">
                and id in
                <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getUserIdListByRoleId" resultType="java.lang.Long">
        select t.id
        from sys_user t
        where t.is_deleted = 0
          and t.role_code = #{roleCode}
          and t.approve_status = 1
    </select>

    <insert id="insertBatch" parameterType="java.util.List" keyColumn="id" keyProperty="list.id"
            useGeneratedKeys="true">
        INSERT INTO `sys_user` (username, short_id, password, `name`, nickname, head_img_url, mobile, sex, email,
        open_id,area_code, school_id, role_code, enabled, approve_status, create_by, create_time, update_by,
        update_time, is_deleted)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (HEX(AES_ENCRYPT(#{item.username}, #{key})),HEX(AES_ENCRYPT(#{item.shortId},#{key})),
            HEX(AES_ENCRYPT(#{item.password},#{key})),HEX(AES_ENCRYPT(#{item.name}, #{key})),#{item.nickname},
            #{item.headImgUrl},HEX(AES_ENCRYPT(#{item.mobile}, #{key})),#{item.sex},#{item.email}, #{item.openId},
            #{item.areaCode},#{item.schoolId},#{item.roleCode},#{item.enabled},#{item.approveStatus},#{item.createBy},#{item.createTime},
            #{item.updateBy},#{item.updateTime},#{item.isDeleted})
        </foreach>
    </insert>

    <select id="selectByUsernames" parameterType="java.util.List"
            resultType="com.cnasoft.health.userservice.model.SysUser">
        select id,AES_DECRYPT(UNHEX(username), #{key}) as username, false as `match`
        from sys_user u
        <where>
            is_deleted = 0 and approve_status = 1
            <if test="usernames != null and usernames.size() > 0">
                and AES_DECRYPT(UNHEX(username), #{key}) in
                <foreach collection="usernames" close=")" item="item" open="(" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <select id="selectRoleCode" resultType="java.lang.String">
        select role_code
        from sys_user
        where id = #{id}
          and is_deleted = 0 limit 1
    </select>

    <update id="updateBatch" parameterType="java.util.List">
        update sys_user
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="username =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.username != null and item.username != ''">
                        when id=#{item.id} then HEX(AES_ENCRYPT(#{item.username}, #{key}))
                    </if>
                </foreach>
            </trim>
            <trim prefix="short_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.shortId != null and item.shortId != ''">
                        when id=#{item.id} then HEX(AES_ENCRYPT(#{item.shortId}, #{key}))
                    </if>
                </foreach>
            </trim>
            <trim prefix="password =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.password != null and item.password != ''">
                        when id=#{item.id} then HEX(AES_ENCRYPT(#{item.password}, #{key}))
                    </if>
                </foreach>
            </trim>
            <trim prefix="name =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.name != null and item.name != ''">
                        when id=#{item.id} then HEX(AES_ENCRYPT(#{item.name}, #{key}))
                    </if>
                </foreach>
            </trim>
            <trim prefix="nickname =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.nickname != null ">
                        when id=#{item.id} then #{item.nickname}
                    </if>
                </foreach>
            </trim>
            <trim prefix="head_img_url =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.headImgUrl != null ">
                        when id=#{item.id} then #{item.headImgUrl}
                    </if>
                </foreach>
            </trim>
            <trim prefix="mobile =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.mobile != null and item.mobile != ''">
                        when id=#{item.id} then HEX(AES_ENCRYPT(#{item.mobile}, #{key}))
                    </if>
                </foreach>
            </trim>
            <trim prefix="sex =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.sex != null">
                        when id=#{item.id} then #{item.sex}
                    </if>
                </foreach>
            </trim>
            <trim prefix="email =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.email != null ">
                        when id=#{item.id} then #{item.email}
                    </if>
                </foreach>
            </trim>
            <trim prefix="open_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.openId != null and item.openId != ''">
                        when id=#{item.id} then #{item.openId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="area_code =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.areaCode != null">
                        when id=#{item.id} then #{item.areaCode}
                    </if>
                </foreach>
            </trim>
            <trim prefix="school_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.schoolId != null">
                        when id=#{item.id} then #{item.schoolId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="role_code =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.roleCode != null and item.roleCode != ''">
                        when id=#{item.id} then #{item.roleCode}
                    </if>
                </foreach>
            </trim>
            <trim prefix="enabled =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.enabled != null">
                        when id=#{item.id} then #{item.enabled}
                    </if>
                </foreach>
            </trim>
            <trim prefix="approve_status =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.approveStatus != null and item.approveStatus > -1">
                        when id=#{item.id} then #{item.approveStatus}
                    </if>
                </foreach>
            </trim>
            <trim prefix="first_login =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.firstLogin != null">
                        when id=#{item.id} then #{item.firstLogin}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_by =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.updateBy != null">
                        when id=#{item.id} then #{item.updateBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.updateTime != null">
                        when id=#{item.id} then #{item.updateTime}
                    </if>
                </foreach>
            </trim>
            <trim prefix="is_deleted =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.isDeleted != null">
                        when id=#{item.id} then #{item.isDeleted}
                    </if>
                </foreach>
            </trim>
            <trim prefix="first_login =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.firstLogin != null">
                        when id=#{item.id} then #{item.firstLogin}
                    </if>
                </foreach>
            </trim>
            <trim prefix="name_change =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.nameChange != null">
                        when id=#{item.id} then #{item.nameChange}
                    </if>
                </foreach>
            </trim>
        </trim>
        where id in
        <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>

    <select id="getRegionStaffInfo" resultType="com.cnasoft.health.common.dto.RegionStaffInfoDTO">
        select t.department as departmentName,
               t.post       as post,
               t.job_number as jobNumber
        from area_staff t
        where t.user_id = #{userId}
          and t.is_deleted = 0
    </select>

    <select id="studentExisted" resultType="java.lang.Integer">
        select 1
        from student_base_info
        where identity_card_number = #{identityCardNumber}
          and id <![CDATA[<>]]> #{neUserId} limit 1
    </select>

    <select id="getUserEmail" resultType="java.lang.String">
        select email
        from sys_user
        where id = #{id}
          and is_deleted = 0
          and approve_status = 1
    </select>

    <select id="getSchoolManagerIdByQuery" resultType="java.lang.Long">
        select sm.user_id from school_manager sm
        <if test="query != null and query != ''">
            inner join sys_user su on su.id = sm.user_id
        </if>
        where 1 = 1
        <if test="query != null and query != ''">
            and (
            LOCATE(#{query}, AES_DECRYPT(UNHEX(su.name), #{key})) > 0 or
            AES_DECRYPT(UNHEX(su.mobile), #{key}) = #{query} or
            LOCATE(#{query}, su.area_code) > 0
            )
        </if>
    </select>

    <select id="getTestManagerIdByQuery" resultType="java.lang.Long">
        select tm.user_id from test_manager tm
        <if test="query != null and query != ''">
            inner join sys_user su on su.id = tm.user_id
        </if>
        where 1 = 1
        <if test="query != null and query != ''">
            and (
            LOCATE(#{query}, AES_DECRYPT(UNHEX(su.name), #{key})) > 0 or
            AES_DECRYPT(UNHEX(su.mobile), #{key}) = #{query} or
            LOCATE(#{query}, su.area_code) > 0
            )
        </if>
    </select>

    <select id="getAreaManagerIdByQuery" resultType="java.lang.Long">
        select u.id from sys_user u where u.role_code = 'region_admin'
        <if test="query != null and query != ''">
            and (
            LOCATE(#{query}, AES_DECRYPT(UNHEX(u.name), #{key})) > 0 or
            AES_DECRYPT(UNHEX(u.mobile), #{key}) = #{query}
            )
        </if>
        <if test="areaType > -1">
            and
            <choose>
                <when test="areaType==0">
                    u.area_code % 10000 = 0
                </when>
                <when test="areaType==1">
                    (u.area_code % 10000 != 0 and u.area_code % 100 = 0)
                </when>
                <when test="areaType==2">
                    (u.area_code % 10000 != 0 and u.area_code % 100 != 0)
                </when>
            </choose>
        </if>
    </select>

    <select id="findUsernameAndMobile" resultType="java.lang.String">
        (select IFNULL(AES_DECRYPT(UNHEX(username), #{key}), '')
         from sys_user
         where is_deleted = 0 limit #{limit}
         offset #{offset})
        union
        (select IFNULL(AES_DECRYPT(UNHEX(mobile), #{key}), '')
         from sys_user
         where is_deleted = 0 limit #{limit}
         offset #{offset})
        union
        (select IFNULL(AES_DECRYPT(UNHEX(short_id), #{key}), '')
         from sys_user
         where is_deleted = 0 limit #{limit}
         offset #{offset})
    </select>

    <select id="findUserByUsernameOrMobileOrShortId" resultType="com.cnasoft.health.userservice.model.SysUser">
        select
        <include refid="column_list"/>
        from sys_user t
        where t.is_deleted = 0 and
        <choose>
            <when test="flag != null and flag == 'mobile'">
                t.mobile = HEX(AES_ENCRYPT(#{query}, #{key}))
            </when>
            <when test="flag != null and flag == 'userName'">
                t.username = HEX(AES_ENCRYPT(#{query}, #{key}))
            </when>
            <when test="flag != null and flag == 'shortId'">
                t.short_id = HEX(AES_ENCRYPT(#{query}, #{key}))
            </when>
        </choose>
    </select>

    <select id="findUserByUsernameWithTestManager" resultType="com.cnasoft.health.userservice.model.SysUser">
        select
        <include refid="column_list"/>
        from sys_user t
        where t.is_deleted = 0 and AES_DECRYPT(UNHEX(t.mobile), #{key}) = #{query}
        and t.role_code = 'test_admin' limit 1
    </select>

    <select id="getUserByUsernameRoleAreaSchool" resultType="com.cnasoft.health.userservice.model.SysUser">
        select
        <include refid="column_list"/>
        from sys_user t where AES_DECRYPT(UNHEX(t.username), #{key}) = #{username}
        and t.is_deleted = 0 and t.role_code = #{role}
        <if test="area != null and area > 0">
            and t.area_code = #{area}
        </if>
        <if test="schoolId != null and schoolId > 0">
            and t.school_id = #{schoolId}
        </if>
    </select>

    <select id="selectChildrenUserIdsByParentUserId" resultType="java.lang.Long">
        select distinct t.user_id
        from student_base_info t
                 inner join parent p on t.parent_id = p.id
        where p.user_id = #{userId}
          and p.is_deleted = 0
          and t.is_deleted = 0
    </select>

    <select id="getUserIdBySchool" resultType="java.lang.Long">
        select id
        from sys_user
        where school_id = #{schoolId}
          and is_deleted = 0
    </select>

    <select id="checkExistsUserByUserIdAndSchoolId" resultType="java.lang.Boolean">
        select IF(count(0) > 0, TRUE, FALSE)
        from sys_user
        where id = #{userId}
          and school_id = #{schoolId}
          and is_deleted = 0
    </select>

    <select id="checkExistsUserByUserIdAndAreaCode" resultType="java.lang.Boolean">
        select IF(count(0) > 0, TRUE, FALSE)
        from sys_user
        where id = #{userId}
          and area_code = #{areaCode}
          and is_deleted = 0
    </select>

    <select id="getUserIdByAreaCode" resultType="java.lang.Long">
        select id
        from sys_user
        where area_code = #{areaCode}
          and is_deleted = 0
    </select>

    <update id="updateShortId">
        update sys_user
        <set>
            <if test="u.shortId != null and u.shortId != ''">
                short_id = HEX(AES_ENCRYPT(#{u.shortId}, #{key})),
            </if>
            <if test="u.updateTime != null">
                update_time = #{u.updateTime},
            </if>
            <if test="u.updateBy != null">
                update_by = #{u.updateBy},
            </if>
        </set>
        where id = #{u.id}
    </update>

    <select id="getPadUpgradeUrl" resultType="java.lang.String">
        select getPadUpgradeUrl(#{currentVersion})
    </select>
    <select id="getAreaManagerStatistics" resultType="java.util.Map">
        select a.month, SUM(b.total) total
        from (select DATE_FORMAT(create_time, '%Y-%m') month, COUNT(*) sum
              from sys_user
              where approve_status = 1 and is_deleted = 0 and role_code = 'region_admin'
              group by DATE_FORMAT(create_time, '%Y-%m')) a
                 join
             (select DATE_FORMAT(create_time, '%Y-%m') month, COUNT(*) total
              from sys_user
              where approve_status = 1
                and is_deleted = 0
                and role_code = 'region_admin'
              group by DATE_FORMAT(create_time, '%Y-%m')) b
             on a.month <![CDATA[ >= ]]> b.month
        where a.month <![CDATA[ >= ]]> #{date}
        group by a.month
        order by a.month
    </select>
    <select id="getSchoolManagerStatistics" resultType="java.util.Map">
        select a.month, SUM(b.total) total
        from (select DATE_FORMAT(create_time, '%Y-%m') month, COUNT(*) sum
              from sys_user
              where approve_status = 1 and is_deleted = 0 and role_code = 'region_admin'
              group by DATE_FORMAT(create_time, '%Y-%m')) a
                 join
             (select DATE_FORMAT(create_time, '%Y-%m') month, COUNT(*) total
              from sys_user
              where approve_status = 1
                and is_deleted = 0
                and role_code = 'region_admin'
              group by DATE_FORMAT(create_time, '%Y-%m')) b
             on a.month <![CDATA[ >= ]]> b.month
        where a.month <![CDATA[ >= ]]> #{date}
        group by a.month
        order by a.month
    </select>
    <select id="getAreaUserCount" resultType="java.lang.Integer">
        select count(1) from sys_user su
        <if test="userRoleType == 0">
            left join student_base_info lj on lj.user_id = su.id
        </if>
        <if test="userRoleType == 1">
            left join parent lj on lj.user_id = su.id
        </if>
        <if test="userRoleType == 2">
            left join school_staff lj on lj.user_id = su.id
        </if>
        <if test="userRoleType == 4">
            left join school_teacher lj on lj.user_id = su.id
        </if>
        <if test="userRoleType == 3">
            left join area_staff s on s.user_id = su.id
        </if>
        <if test="userRoleType == 5">
            left join area_teacher s on s.user_id = su.id
        </if>
        <if test="userRoleType != 3 and userRoleType != 5">
            inner join school s on s.id = lj.school_id
        </if>
        where su.is_deleted = 0 and s.area_code like concat(#{areaCode}, '%')
    </select>
    <select id="getGradesStudentNum" resultType="java.util.Map">
        select count(1) sum, sbi.grade
        from student_base_info sbi
        where sbi.grade in (select distinct (grade) from clazz where school_id = #{schoolId})
          and sbi.school_id = #{schoolId}
        group by sbi.grade
        order by grade
    </select>
    <select id="getGradesParentNum" resultType="java.util.Map">
        select count(1) sum, sbi.grade
        from parent p
            left join student_base_info sbi
        on sbi.parent_id = p.id
        where sbi.grade in (select distinct (grade) from clazz where school_id = #{schoolId})
          and sbi.school_id = #{schoolId}
        group by sbi.grade
        order by grade
    </select>
    <select id="getDepartmentStaffNum" resultType="java.util.Map">
        select count(1) sum, ss.department grade
        from school_staff ss
        where ss.school_id = #{schoolId}
        group by ss.department
        order by grade
    </select>
    <select id="getSchoolTeacherNum" resultType="java.util.Map">
        select count(1) sum, ss.department grade
        from school_teacher ss
        where ss.school_id = #{schoolId}
        group by ss.department
        order by grade
    </select>
    <select id="getAreaStudentNum" resultType="java.util.Map">
        select count(1) sum, sbi.school_id, (select name from school where id = sbi.school_id) name
        from student_base_info sbi
        where sbi.school_id in (select id from school s where s.area_code like concat(#{areaCode}, '%'))
        group by school_id
        order by school_id
    </select>
    <select id="getAreaParentNum" resultType="java.util.Map">
        select count(1) sum, p.school_id, (select name from school where id = p.school_id) name
        from parent p
        where p.school_id in (select id from school s where s.area_code like concat(#{areaCode}, '%'))
        group by school_id
        order by school_id
    </select>
    <select id="getAreaSchoolStaffNum" resultType="java.util.Map">
        select count(1) sum, ss.school_id, (select name from school where id = ss.school_id) name
        from school_staff ss
        where ss.school_id in (select id from school s where s.area_code like concat(#{areaCode}, '%'))
        group by school_id
        order by school_id
    </select>
    <select id="getAreaStaffNum" resultType="java.util.Map">
        select count(1) sum, ss.department school_id, ss.department name
        from area_staff ss
        where ss.area_code = #{wholeAreaCode}
        group by ss.department
    </select>
    <select id="getAreaTeacherNum" resultType="java.util.Map">
        select count(1) sum, ss.department school_id, ss.department name
        from area_teacher ss
        where ss.area_code = #{wholeAreaCode}
        group by ss.department
    </select>

    <select id="findNameById" resultType="java.lang.String">
        select AES_DECRYPT(UNHEX(name), #{key})
        from sys_user
        where id = #{userId}
    </select>

    <select id="findNameByIds" resultType="com.cnasoft.health.common.dto.CommonDTO">
        select id,AES_DECRYPT(UNHEX(name), #{key}) as name
        from sys_user
        where id in
        <foreach collection="userIds" index="index" item="userId" open="(" close=")" separator=",">
            #{userId}
        </foreach>
    </select>

    <select id="getAreaUserIdByParams" resultType="java.lang.Long">
        select id
        from sys_user
        where is_deleted = 0 and approve_status = 1
        <if test="params.areaCode != null and params.areaCode != ''">
            and area_code = #{params.areaCode}
        </if>
        <if test="params.roleCodes != null and params.roleCodes.size() > 0">
            and role_code in
            <foreach collection="params.roleCodes" separator="," open="(" close=")" index="index" item="roleCode">
                #{roleCode}
            </foreach>
        </if>
        <if test="params.name != null and params.name != ''">
            and LOCATE(#{params.name},AES_DECRYPT(UNHEX(name),#{key})) > 0
        </if>
    </select>

    <select id="findUserIdListByName" resultType="java.lang.Long">
        select id
        from sys_user
        where LOCATE(#{name}, AES_DECRYPT(UNHEX(name), #{key})) > 0
        <if test="roleCodes != null and roleCodes.size() > 0">
            and role_code in
            <foreach collection="roleCodes" separator="," open="(" close=")" index="index" item="roleCode">
                #{roleCode}
            </foreach>
        </if>
        and is_deleted = 0
        and approve_status = 1
    </select>

    <select id="getUserIdsByQuery" resultType="java.lang.Long">
        SELECT s.id from sys_user s
        where s.is_deleted = 0
        <if test="params.queryRoleEnumValue != null and params.queryRoleEnumValue.size() > 0">
            and s.role_code in
            <foreach collection="params.queryRoleEnumValue" index="index" item="roleEnumValue" open="(" close=")" separator=",">
                #{roleEnumValue}
            </foreach>
        </if>

        <if test="params.authRoleEnumValue != null and params.authRoleEnumValue.size() > 0">
            and s.role_code in
            <foreach collection="params.authRoleEnumValue" index="index" item="roleEnumValue" open="(" close=")" separator=",">
                #{roleEnumValue}
            </foreach>
        </if>
        <if test="params.schoolId != null">
            and s.school_id = #{params.schoolId}
        </if>
        <if test="params.areaCode != null">
            and s.area_code = #{params.areaCode}
        </if>
        <if test="params.keyword != null and params.keyword != ''">
            and AES_DECRYPT(UNHEX(s.name), #{key}) like concat('%',#{params.keyword}, '%')
        </if>
    </select>

    <update id="fullData">
        update sys_user set is_deleted = 0 where id = #{id}
    </update>
</mapper>
